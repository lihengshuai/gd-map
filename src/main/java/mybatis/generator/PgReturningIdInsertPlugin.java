package mybatis.generator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.mybatis.generator.api.FullyQualifiedTable;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

/**
 * 生成Mapper接口和Mapper XML中增加 insertReturningId 等方法, 使插入记录时能返回所插入 记录的id。目前只支持PostgreSQL数据库
 * <p>
 * Date: 16/8/30 Time: 下午2:57
 *
 * @author Loki
 */
public class PgReturningIdInsertPlugin extends PluginAdapter {

  private Map<FullyQualifiedTable, List<XmlElement>> elementsToAdd;

  public PgReturningIdInsertPlugin() {
    elementsToAdd = new HashMap<FullyQualifiedTable, List<XmlElement>>();
  }

  @Override
  public boolean validate(List<String> warnings) {
    return true;
  }

  public boolean clientInsertMethodGenerated(Method method, Interface interfaze,
      IntrospectedTable introspectedTable) {
    copyAndAddMethod(method, interfaze);
    return true;
  }

  public boolean clientInsertSelectiveMethodGenerated(Method method,
      Interface interfaze, IntrospectedTable introspectedTable) {
    copyAndAddMethod(method, interfaze);
    return true;
  }

  public boolean sqlMapInsertElementGenerated(XmlElement element,
      IntrospectedTable introspectedTable) {
    copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
    return true;
  }

  public boolean sqlMapInsertSelectiveElementGenerated(XmlElement element,
      IntrospectedTable introspectedTable) {
    copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
    return true;
  }

  /**
   * We'll override this method and add any new elements generated by previous calls
   */
  @Override
  public boolean sqlMapDocumentGenerated(Document document,
      IntrospectedTable introspectedTable) {
    List<XmlElement> elements = elementsToAdd
        .get(introspectedTable.getFullyQualifiedTable());
    if (elements != null) {
      for (XmlElement element : elements) {
        document.getRootElement().addElement(element);
      }
    }

    return true;
  }

  private void copyAndAddMethod(Method method, Interface interfaze) {
    Method newMethod = new Method(method);
    newMethod.setName(method.getName() + "ReturningId");
    newMethod.setReturnType(new FullyQualifiedJavaType("long"));
    interfaze.addMethod(newMethod);

    // called 'id' and the column type is 'BIGINT'
    List<String> annotations = newMethod.getAnnotations();
    if (annotations.size() > 3) {
      annotations.set(0, "@Select({");

      // third to last is the line above "})" line
      // we assume there is a line like: @Options(useGeneratedKeys=true,keyProperty="id")
      String third2Last = annotations.get(annotations.size() - 3);
      third2Last = third2Last + ", ";
      annotations.set(annotations.size() - 3, third2Last);
      annotations.add(annotations.size() - 2, "    \" returning id\"");
    }
  }

  private void copyAndSaveElement(XmlElement element, FullyQualifiedTable fqt) {
    XmlElement newElement = new XmlElement(element);

    String newId = null;
    // remove old id attribute and add a new one with the new name
    for (Iterator<Attribute> iterator = newElement.getAttributes()
        .iterator(); iterator.hasNext(); ) {
      Attribute attribute = iterator.next();
      if ("id".equals(attribute.getName())) { //$NON-NLS-1$
        iterator.remove();
        newId = attribute.getValue() + "ReturningId"; //$NON-NLS-1$ //$NON-NLS-2$
      } else if ("keyColumn".equals(attribute.getName())
          || "keyProperty".equals(attribute.getName())
          || "useGeneratedKeys".equals(attribute.getName())) {
        iterator.remove();
      }
    }

    if (newId != null) {
      newElement.addAttribute(new Attribute("id", newId));
    }

    Attribute attribute = new Attribute("resultType", "long");
    newElement.addAttribute(attribute);
    newElement.setName("select");

    // add "returning id"
    TextElement textElement = new TextElement("returning id");
    newElement.getElements().add(textElement);

    // save the new element locally.   We'll add it to the document
    // later
    List<XmlElement> elements = elementsToAdd.get(fqt);
    if (elements == null) {
      elements = new ArrayList<XmlElement>();
      elementsToAdd.put(fqt, elements);
    }
    elements.add(newElement);
  }
}
